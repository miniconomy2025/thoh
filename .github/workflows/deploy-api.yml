name: Deploy Express App to EC2

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Reboot EC2 instance before deployment
        run: |
          echo "üîÑ Rebooting EC2 instance..."
          ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" \
            ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "sudo reboot" || true

          echo "üïí Waiting for EC2 to come back online..."
          for i in {1..30}; do
            sleep 10
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -i "~/.ssh/id_rsa" \
               ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "echo '‚úÖ EC2 is back online'" >/dev/null 2>&1; then
              echo "‚úÖ EC2 instance is back online."
              break
            fi
            echo "‚è≥ Waiting for EC2 to finish rebooting... ($i/30)"
            if [ $i -eq 30 ]; then
              echo "‚ùå EC2 instance did not come back online in time."
              exit 1
            fi
          done

      - name: Upload application files
        run: |
          scp -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" -r api frontend \
            ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/${{ vars.EC2_USER }}/thoh


      - name: Upload deployment script
        run: |
          cat <<'EOF' > run.sh
          #!/bin/bash
          set -e
          APP_DIR="/home/${{ vars.EC2_USER }}/thoh"
          SERVICE_NAME="thoh"
          ENTRY_FILE="dist/main.js"
          FRONTEND_PORT=4173

          echo "--- Installing Node.js ---"
          curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
          sudo yum install -y nodejs

          echo "--- Installing PM2 ---"
          sudo npm install -g pm2

          echo "--- Installing and building frontend ---"
          cd $APP_DIR/frontend
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install --omit=dev
          npm install rollup --force
          npm rebuild rollup
          
          
          echo "--- Building backend ---"
          cd $APP_DIR/api
          npm run build
          
          echo "--- Building frontend ---"
          npm run build

          echo "--- Starting frontend with PM2 ---"
          pm2 delete frontend || true
          pm2 start "npm run preview -- --port 4173" --name frontend
          pm2 save

          echo "--- Installing backend dependencies ---"
          cd $APP_DIR/api
          npm install

          echo "--- Writing environment variables ---"
          cat <<ENVEOF > "$APP_DIR/api/.env"
          POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          MACHINE_FAILURE_URLS=${{ secrets.MACHINE_FAILURE_URLS }}
          TRUCK_FAILURE_URLS=${{ secrets.TRUCK_FAILURE_URLS }}
          BANK_RATE_UPDATE_URL=${{ secrets.BANK_RATE_UPDATE_URL }}
          EPOCH_NOTIFICATION_URLS=${{ secrets.EPOCH_NOTIFICATION_URLS }}
          RETAIL_BANK_API_URL=${{ secrets.RETAIL_BANK_API_URL }}
          PEAR_PHONE_API_URL=${{ secrets.PEAR_PHONE_API_URL }}
          SUM_SANG_API_URL=${{ secrets.SUM_SANG_API_URL }}
          RECYCLER_API_URL=${{ secrets.RECYCLER_API_URL }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_SQS_CRITICAL_QUEUE_URL=${{ secrets.AWS_SQS_CRITICAL_QUEUE_URL }}
          AWS_SQS_BUSINESS_QUEUE_URL=${{ secrets.AWS_SQS_BUSINESS_QUEUE_URL }}
          AWS_SQS_NOTIFICATION_QUEUE_URL=${{ secrets.AWS_SQS_NOTIFICATION_QUEUE_URL }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          END_SIMULATION_URLS=${{ secrets.END_SIMULATION_URLS }}
          COMMERCIAL_BANK_ACCOUNTS_URL=${{ secrets.COMMERCIAL_BANK_ACCOUNTS_URL }}
          APPLICATION_NAME=${{ vars.APPLICATION_NAME }}
          REST_BASE_PATH=${{ vars.REST_BASE_PATH }}
          NODE_ENV=${{ vars.NODE_ENV }}
          COMMERCIAL_BANK_URL=${{ vars.COMMERCIAL_BANK_URL }}
          API_BASEURL=https://${{ vars.EC2_HOST }}${{ vars.REST_BASE_PATH }}
          BULK_LOGISTICS_API_URL=${{ vars.BULK_LOGISTICS_API_URL}}
          CONSUMER_LOGISTICS_API_URL=${{ vars.CONSUMER_LOGISTICS_API_URL }}
          POSTGRES_CA=${{ vars.POSTGRES_CA }}
          POSTGRES_KEY=${{ vars.POSTGRES_KEY }}
          POSTGRES_CERT=${{ vars.POSTGRES_CERT }}
          VITE_API_URL=${{ vars.VITE_API_URL }}
          VITE_COMMERCIAL_BANK_URL=${{ vars.VITE_COMMERCIAL_BANK_URL }}
          ENVEOF

          echo "--- Copying .env to frontend ---"
          cp "$APP_DIR/api/.env" "$APP_DIR/frontend/.env"
          
          
          echo "--- Building backend ---"
          cd $APP_DIR/api
          npm run build

          echo "--- Starting backend with PM2 ---"
          pm2 delete $SERVICE_NAME || true
          pm2 start "npm run start" --name $SERVICE_NAME --cwd $APP_DIR/api
          pm2 save

          echo "--- Installing and configuring NGINX ---"
          sudo yum install -y nginx openssl
          sudo systemctl enable nginx

          CERT_DIR="/etc/nginx/ssl"
          sudo mkdir -p $CERT_DIR

          sudo openssl req -x509 -nodes -days 365 \
            -newkey rsa:2048 \
            -keyout $CERT_DIR/selfsigned.key \
            -out $CERT_DIR/selfsigned.crt \
            -subj "/C=US/ST=Test/L=Test/O=Test/OU=Test/CN=${{ vars.EC2_HOST }}"

          NGINX_CONF="/etc/nginx/conf.d/thoh.conf"

          sudo tee $NGINX_CONF > /dev/null <<NGINXEOF
          server {
              listen 80;
              server_name _;

              location / {
                  return 301 https://\$host\$request_uri;
              }
          }

          server {
              listen 443 ssl;
              server_name _;

              ssl_certificate     $CERT_DIR/selfsigned.crt;
              ssl_certificate_key $CERT_DIR/selfsigned.key;

              ssl_protocols       TLSv1.2 TLSv1.3;
              ssl_ciphers         HIGH:!aNULL:!MD5;

              location / {
                  proxy_pass http://localhost:4173;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection upgrade;
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }

              location /api/ {
                  proxy_pass http://localhost:3000/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection upgrade;
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINXEOF

          echo "--- Restarting NGINX ---"
          sudo nginx -t && sudo systemctl restart nginx

          echo "‚úÖ Deployment complete."
          pm2 list
          EOF

          scp -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" run.sh \
            ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/${{ vars.EC2_USER }}/run.sh


      - name: Execute deployment script on EC2
        run: |
          ssh -tt -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" \
            ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "
              chmod +x ~/run.sh
              echo 'üöÄ Running deployment...'
              bash ~/run.sh 2>&1 | tee ~/deploy.log
            "


      - name: Download deploy log artifact
        run: |
          scp -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" \
            ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/${{ vars.EC2_USER }}/deploy.log .
        continue-on-error: true

      - name: Upload deploy log to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: ec2-deploy-log
          path: deploy.log