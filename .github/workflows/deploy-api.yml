name: Deploy Express App to EC2

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copying stuff over
        run: |
          scp -r -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" api ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }}:/home/${{ vars.EC2_USER }}/thoh

          ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "cat > /home/${{ vars.EC2_USER }}/run.sh <<'EOF'
          #!/bin/bash
          set -e
          APP_DIR=\"/home/${{ vars.EC2_USER }}/thoh\"
          SERVICE_NAME=\"thoh\"
          ENTRY_FILE=\"dist/main.ts\"

          echo \"--- Installing Node.js (v20 LTS) ---\"
          curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
          sudo yum install -y nodejs

          echo \"--- Moving to \$APP_DIR and installing dependencies ---\"
          cd \$APP_DIR
          npm install --production

          echo \"--- Writing .env file ---\"
          cat <<ENVEOF > \"\$APP_DIR/.env\"
          POSTGRES_HOST=${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT=${{ vars.POSTGRES_PORT }}
          POSTGRES_DB=${{ vars.POSTGRES_DB }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          MACHINE_FAILURE_URLS=${{ secrets.MACHINE_FAILURE_URLS }}
          TRUCK_FAILURE_URLS=${{ secrets.TRUCK_FAILURE_URLS }}
          BANK_RATE_UPDATE_URL=${{ secrets.BANK_RATE_UPDATE_URL }}
          EPOCH_NOTIFICATION_URLS=${{ secrets.EPOCH_NOTIFICATION_URLS }}
          RETAIL_BANK_API_URL=${{ secrets.RETAIL_BANK_API_URL }}
          PEAR_PHONE_API_URL=${{ secrets.PEAR_PHONE_API_URL }}
          SUM_SANG_API_URL=${{ secrets.SUM_SANG_API_URL }}
          RECYCLER_API_URL=${{ secrets.RECYCLER_API_URL }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_SQS_CRITICAL_QUEUE_URL=${{ secrets.AWS_SQS_CRITICAL_QUEUE_URL }}
          AWS_SQS_BUSINESS_QUEUE_URL=${{ secrets.AWS_SQS_BUSINESS_QUEUE_URL }}
          AWS_SQS_NOTIFICATION_QUEUE_URL=${{ secrets.AWS_SQS_NOTIFICATION_QUEUE_URL }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          END_SIMULATION_URLS=${{ secrets.END_SIMULATION_URLS }}
          COMMERCIAL_BANK_ACCOUNTS_URL=${{ secrets.COMMERCIAL_BANK_ACCOUNTS_URL }}
          APPLICATION_NAME=${{ vars.APPLICATION_NAME }}
          REST_BASE_PATH=${{ vars.REST_BASE_PATH }}
          API_BASEURL=https://${{ vars.EC2_HOST }}${{ vars.REST_BASE_PATH }}
          ENVEOF

          chmod 600 \"\$APP_DIR/.env\"

          echo \"--- Creating systemd service ---\"
          sudo bash -c \"cat > /etc/systemd/system/\$SERVICE_NAME.service\" <<SERVICEEOF
          [Unit]
          Description=thoh Express App
          After=network.target

          [Service]
          EnvironmentFile=\$APP_DIR/.env
          WorkingDirectory=\$APP_DIR
          ExecStart=/usr/bin/node \$APP_DIR/\$ENTRY_FILE
          Restart=always
          User=${{ vars.EC2_USER }}
          Group=${{ vars.EC2_USER }}

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF

          echo \"--- Reloading systemd and starting service ---\"
          sudo systemctl daemon-reload
          sudo systemctl enable \$SERVICE_NAME
          sudo systemctl restart \$SERVICE_NAME

          echo \"--- Installing and configuring NGINX with HTTPS ---\"
          sudo yum install -y nginx openssl
          sudo systemctl enable nginx

          CERT_DIR=\"/etc/nginx/ssl\"
          sudo mkdir -p \$CERT_DIR

          echo \"--- Generating self-signed cert ---\"
          sudo openssl req -x509 -nodes -days 365 \
            -newkey rsa:2048 \
            -keyout \$CERT_DIR/selfsigned.key \
            -out \$CERT_DIR/selfsigned.crt \
            -subj \"/C=US/ST=Test/L=Test/O=Test/OU=Test/CN=${{ vars.EC2_HOST }}\"

          NGINX_CONF=\"/etc/nginx/conf.d/thoh.conf\"

          sudo bash -c \"cat > \$NGINX_CONF\" <<NGINXEOF
          # Redirect HTTP to HTTPS
          server {
              listen 80;
              server_name _;

              location / {
                  return 301 https://\$host\$request_uri;
              }
          }

          # HTTPS server
          server {
              listen 443 ssl;
              server_name _;

              ssl_certificate     \$CERT_DIR/selfsigned.crt;
              ssl_certificate_key \$CERT_DIR/selfsigned.key;

              ssl_protocols       TLSv1.2 TLSv1.3;
              ssl_ciphers         HIGH:!aNULL:!MD5;

              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection upgrade;
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          NGINXEOF

          echo \"--- Testing and restarting NGINX ---\"
          sudo nginx -t && sudo systemctl restart nginx

          echo \"âœ… Express app deployed and HTTPS is active on port 443.\"
          EOF"

      - name: Run run.sh on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ${{ vars.EC2_USER }}@${{ vars.EC2_HOST }} "chmod +x ~/run.sh && ~/run.sh"
